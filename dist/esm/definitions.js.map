{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export type CameraPosition = 'rear' | 'front';\nexport interface CameraPreviewOptions {\n  /** Parent element to attach the video preview element to (applicable to the web platform only) */\n  parent?: string;\n  /** Class name to add to the video preview element (applicable to the web platform only) */\n  className?: string;\n  /** The preview width in pixels, default window.screen.width */\n  width?: number;\n  /** The preview height in pixels, default window.screen.height */\n  height?: number;\n  /** The x origin, default 0 (applicable to the android and ios platforms only) */\n  x?: number;\n  /** The y origin, default 0 (applicable to the android and ios platforms only) */\n  y?: number;\n  /**  Brings your html in front of your preview, default false (applicable to the android only) */\n  toBack?: boolean;\n  /** The preview bottom padding in pixes. Useful to keep the appropriate preview sizes when orientation changes (applicable to the android and ios platforms only) */\n  paddingBottom?: number;\n  /** Rotate preview when orientation changes (applicable to the ios platforms only; default value is true) */\n  rotateWhenOrientationChanged?: boolean;\n  /** Choose the camera to use 'front' or 'rear', default 'front' */\n  position?: CameraPosition | string;\n  /** Defaults to false - Capture images to a file and return the file path instead of returning base64 encoded data */\n  storeToFile?: boolean;\n  /** Defaults to false - Android Only - Disable automatic rotation of the image, and let the browser deal with it (keep reading on how to achieve it) */\n  disableExifHeaderStripping?: boolean;\n  /** Defaults to false - iOS only - Activate high resolution image capture so that output images are from the highest resolution possible on the device **/\n  enableHighResolution?: boolean;\n  /** Defaults to false - Web only - Disables audio stream to prevent permission requests and output switching */\n  disableAudio?: boolean;\n  /**  Android Only - Locks device orientation when camera is showing. */\n  lockAndroidOrientation?: boolean;\n  /** Defaults to false - Android and Web only.  Set if camera preview can change opacity. */\n  enableOpacity?: boolean;\n  /** Defaults to false - Android only.  Set if camera preview will support pinch to zoom. */\n  enableZoom?: boolean;\n}\nexport interface CameraPreviewPictureOptions {\n  /** The picture height, optional, default 0 (Device default) */\n  height?: number;\n  /** The picture width, optional, default 0 (Device default) */\n  width?: number;\n  /** The picture quality, 0 - 100, default 85 on `iOS/Android`.\n   *\n   * If left undefined, the `web` implementation will export a PNG, otherwise a JPEG will be generated */\n  quality?: number;\n}\n\nexport interface CameraSampleOptions {\n  /** The picture quality, 0 - 100, default 85 */\n  quality?: number;\n}\n\nexport type CameraPreviewFlashMode = 'off' | 'on' | 'auto' | 'red-eye' | 'torch';\n\nexport interface CameraOpacityOptions {\n  /** The percent opacity to set for camera view, default 1 */\n  opacity?: number;\n}\n\nexport interface CameraPreviewPlugin {\n  start(options: CameraPreviewOptions): Promise<void>;\n  startRecordVideo(options: CameraPreviewOptions): Promise<void>;\n  stop(): Promise<void>;\n  stopRecordVideo(): Promise<void>;\n  capture(options: CameraPreviewPictureOptions): Promise<{ value: string }>;\n  captureSample(options: CameraSampleOptions): Promise<{ value: string }>;\n  getSupportedFlashModes(): Promise<{\n    result: CameraPreviewFlashMode[];\n  }>;\n  setFlashMode(options: { flashMode: CameraPreviewFlashMode | string }): Promise<void>;\n  flip(): Promise<void>;\n  setOpacity(options: CameraOpacityOptions): Promise<void>;\n  isCameraStarted(): Promise<{ value: boolean }>;\n}\n"]}